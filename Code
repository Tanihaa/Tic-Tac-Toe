#include <stdio.h>
#include <stdlib.h>

// Structure to represent a player
struct Player {
    char symbol;
    int score;
};

// Function to initialize the Tic-Tac-Toe grid
char** initializeGrid() {
    char** grid = (char**)malloc(3 * sizeof(char*));
    for (int i = 0; i < 3; i++) {
        grid[i] = (char*)malloc(3 * sizeof(char));
        for (int j = 0; j < 3; j++) {
            grid[i][j] = ' ';
        }
    }
    return grid;
}

// Function to print the Tic-Tac-Toe grid
void printGrid(char** grid) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            printf("%c", grid[i][j]);
            if (j < 2) {
                printf(" | ");
            }
        }
        printf("\n");
        if (i < 2) {
            printf("---------\n");
        }
    }
    printf("\n");
}

// Function to check if a player has won
int checkWin(char** grid, char symbol) {
    // Check rows
    for (int i = 0; i < 3; i++) {
        if (grid[i][0] == symbol && grid[i][1] == symbol && grid[i][2] == symbol) {
            return 1;
        }
    }

    // Check columns
    for (int j = 0; j < 3; j++) {
        if (grid[0][j] == symbol && grid[1][j] == symbol && grid[2][j] == symbol) {
            return 1;
        }
    }

    // Check diagonals
    if (grid[0][0] == symbol && grid[1][1] == symbol && grid[2][2] == symbol) {
        return 1;
    }
    if (grid[0][2] == symbol && grid[1][1] == symbol && grid[2][0] == symbol) {
        return 1;
    }

    return 0;
}

int main() {
    struct Player playerX = {'X', 0};
    struct Player playerO = {'O', 0};

    char** grid = initializeGrid();
    int currentPlayer = 0;  // 0 for playerX, 1 for playerO
    int moves = 0;

    while (moves < 9) {
        printGrid(grid);

        int row, col;
        printf("Player %c, enter your row and column (e.g., 1 2): ", (currentPlayer == 0) ? playerX.symbol : playerO.symbol);
        scanf("%d %d", &row, &col);

        // Validate input
        if (row < 1 || row > 3 || col < 1 || col > 3 || grid[row - 1][col - 1] != ' ') {
            printf("Invalid input. Try again.\n");
            continue;
        }

        grid[row - 1][col - 1] = (currentPlayer == 0) ? playerX.symbol : playerO.symbol;

        if (checkWin(grid, (currentPlayer == 0) ? playerX.symbol : playerO.symbol)) {
            printf("Player %c wins!\n", (currentPlayer == 0) ? playerX.symbol : playerO.symbol);
            if (currentPlayer == 0) {
                playerX.score++;
            } else {
                playerO.score++;
            }
            break;
        }

        moves++;
        currentPlayer = 1 - currentPlayer;  // Switch players
    }

    if (moves == 9) {
        printGrid(grid);
        printf("It's a tie!\n");
    }

    printf("Player X's score: %d\n", playerX.score);
    printf("Player O's score: %d\n", playerO.score);

    // Deallocate memory
    for (int i = 0; i < 3; i++) {
        free(grid[i]);
    }
    free(grid);

    return 0;
}
